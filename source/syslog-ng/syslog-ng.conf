@version: 3.7
@module mod-python
    options {
        time-reap(30);
        mark-freq(10);
        keep-hostname(no); chain-hostnames(yes); check-hostname(yes);
        create-dirs(yes); dir-owner("root"); dir-group("root"); dir-perm(0775);
        owner("root"); group("root"); perm(0664);
        flush_lines(500);
    };

    template t_log_detail "[${R_FULLDATE}] SOURCEIP:${SOURCEIP}, HOST:${HOST}, FULLHOST:${FULLHOST}, TAG:${TAG}, MSGID:${MSGID}, MSGHDR:${MSGHDR}, MSG:${MSG} \n";

    filter f_config_cisco {
        message("%SYS-5-CONFIG_I:")
    };
    filter f_login_cisco {
        message("%SEC_LOGIN")
    }
    filter f_login_zyxel {
        match("authentication" value("MSGHDR")) and
        message("User [A-za-z0-9]+ log(in|out)") or
        message("User \(.*\) log(in|out)")
    };
    filter f_save_zyxel {
        match("system" value("MSGHDR")) and
        message("Save system configuration successfully")
    };

    filter f_running_config {
        filter(f_config_cisco) or
        filter(f_login_zyxel)
    };
    filter f_startup_config {
        filter(f_save_zyxel)
    };

    source src_network {
        syslog(port(514) transport(udp));
        syslog(port(514) transport(tcp));
    };

    destination dst_log {
        file(
            "/var/log/devices.log"
            template(t_log_detail)
            suppress(10)
            overwrite-if-older(900)
            );
    };
    destination dst_backup {
        python(
            class("backup.main.backup")
            on-error("fallback-to-string")
            value-pairs(scope(everything))
        );
    };
    destination dst_notify {
        python(
            class("notify.main.notify")
            on-error("fallback-to-string")
            value-pairs(scope(everything))
        );
    };

    log {
        source(src_network);
        destination(dst_log);
    };

    log {
        source(src_network);
        filter(f_running_config);
        destination(dst_backup);
    };

    log {
        source(src_network);
        filter(f_startup_config);
        destination(dst_backup);
    };
